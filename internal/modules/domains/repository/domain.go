// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: domain.sql

package repository

import (
	"context"

	"github.com/lib/pq"
)

func (q *Queries) СreateDomain(ctx context.Context, arg СreateDomainParams) (DomainDB, error) {
	row := q.db.QueryRowContext(ctx, СreateDomain,
		arg.Domain,
		arg.CompanyName,
		arg.Country,
		pq.Array(arg.ScamSources),
		arg.ScamType,
		arg.VerifiedAt,
		arg.VerifiedBy,
		arg.VerificationMethod,
		arg.ExpiresAt,
		arg.RiskScore,
		pq.Array(arg.Reasons),
		arg.Metadata,
		arg.LastCheckAt,
	)
	var i DomainDB
	err := row.Scan(
		&i.Domain,
		&i.Status,
		&i.CompanyName,
		&i.Country,
		pq.Array(&i.ScamSources),
		&i.ScamType,
		&i.VerifiedAt,
		&i.VerifiedBy,
		&i.VerificationMethod,
		&i.ExpiresAt,
		&i.RiskScore,
		pq.Array(&i.Reasons),
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastCheckAt,
	)
	return i, err
}

func (q *Queries) DeleteDomain(ctx context.Context, domain string) error {
	_, err := q.db.ExecContext(ctx, DeleteDomain, domain)
	return err
}

func (q *Queries) GetDomain(ctx context.Context, domain string) (DomainDB, error) {
	row := q.db.QueryRowContext(ctx, GetDomain, domain)
	var i DomainDB
	err := row.Scan(
		&i.Domain,
		&i.Status,
		&i.CompanyName,
		&i.Country,
		pq.Array(&i.ScamSources),
		&i.ScamType,
		&i.VerifiedAt,
		&i.VerifiedBy,
		&i.VerificationMethod,
		&i.ExpiresAt,
		&i.RiskScore,
		pq.Array(&i.Reasons),
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastCheckAt,
	)
	return i, err
}

func (q *Queries) GetDomainsByRiskScore(ctx context.Context, arg GetDomainsByRiskScoreParams) ([]DomainDB, error) {
	rows, err := q.db.QueryContext(ctx, GetDomainsByRiskScore,
		arg.RiskScore,
		arg.RiskScore_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DomainDB
	for rows.Next() {
		var i DomainDB
		if err := rows.Scan(
			&i.Domain,
			&i.Status,
			&i.CompanyName,
			&i.Country,
			pq.Array(&i.ScamSources),
			&i.ScamType,
			&i.VerifiedAt,
			&i.VerifiedBy,
			&i.VerificationMethod,
			&i.ExpiresAt,
			&i.RiskScore,
			pq.Array(&i.Reasons),
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastCheckAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetDomainsByStatus(ctx context.Context, arg GetDomainsByStatusParams) ([]DomainDB, error) {
	rows, err := q.db.QueryContext(ctx, GetDomainsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DomainDB
	for rows.Next() {
		var i DomainDB
		if err := rows.Scan(
			&i.Domain,
			&i.Status,
			&i.CompanyName,
			&i.Country,
			pq.Array(&i.ScamSources),
			&i.ScamType,
			&i.VerifiedAt,
			&i.VerifiedBy,
			&i.VerificationMethod,
			&i.ExpiresAt,
			&i.RiskScore,
			pq.Array(&i.Reasons),
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastCheckAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetDomainsForRecheck(ctx context.Context, arg GetDomainsForRecheckParams) ([]DomainDB, error) {
	rows, err := q.db.QueryContext(ctx, GetDomainsForRecheck, arg.LastCheckAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DomainDB
	for rows.Next() {
		var i DomainDB
		if err := rows.Scan(
			&i.Domain,
			&i.Status,
			&i.CompanyName,
			&i.Country,
			pq.Array(&i.ScamSources),
			&i.ScamType,
			&i.VerifiedAt,
			&i.VerifiedBy,
			&i.VerificationMethod,
			&i.ExpiresAt,
			&i.RiskScore,
			pq.Array(&i.Reasons),
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastCheckAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) MarkDomainAsScam(ctx context.Context, arg MarkDomainAsScamParams) (DomainDB, error) {
	row := q.db.QueryRowContext(ctx, MarkDomainAsScam,
		arg.Domain,
		pq.Array(arg.ScamSources),
		arg.ScamType,
		arg.RiskScore,
		pq.Array(arg.Reasons),
	)
	var i DomainDB
	err := row.Scan(
		&i.Domain,
		&i.Status,
		&i.CompanyName,
		&i.Country,
		pq.Array(&i.ScamSources),
		&i.ScamType,
		&i.VerifiedAt,
		&i.VerifiedBy,
		&i.VerificationMethod,
		&i.ExpiresAt,
		&i.RiskScore,
		pq.Array(&i.Reasons),
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastCheckAt,
	)
	return i, err
}

func (q *Queries) UpdateDomainStatus(ctx context.Context, arg UpdateDomainStatusParams) (DomainDB, error) {
	row := q.db.QueryRowContext(ctx, UpdateDomainStatus,
		arg.Domain,
		arg.Status,
		arg.RiskScore,
		pq.Array(arg.Reasons),
	)
	var i DomainDB
	err := row.Scan(
		&i.Domain,
		&i.Status,
		&i.CompanyName,
		&i.Country,
		pq.Array(&i.ScamSources),
		&i.ScamType,
		&i.VerifiedAt,
		&i.VerifiedBy,
		&i.VerificationMethod,
		&i.ExpiresAt,
		&i.RiskScore,
		pq.Array(&i.Reasons),
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastCheckAt,
	)
	return i, err
}

func (q *Queries) VerifyDomain(ctx context.Context, arg VerifyDomainParams) (DomainDB, error) {
	row := q.db.QueryRowContext(ctx, VerifyDomain,
		arg.Domain,
		arg.VerifiedAt,
		arg.VerifiedBy,
		arg.VerificationMethod,
		arg.ExpiresAt,
		arg.RiskScore,
		pq.Array(arg.Reasons),
	)
	var i DomainDB
	err := row.Scan(
		&i.Domain,
		&i.Status,
		&i.CompanyName,
		&i.Country,
		pq.Array(&i.ScamSources),
		&i.ScamType,
		&i.VerifiedAt,
		&i.VerifiedBy,
		&i.VerificationMethod,
		&i.ExpiresAt,
		&i.RiskScore,
		pq.Array(&i.Reasons),
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastCheckAt,
	)
	return i, err
}