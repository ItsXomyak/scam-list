package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è JSON-–∑–∞–ø—Ä–æ—Å–∞ –∫ API
type ThreatEntry struct {
	URL string `json:"url"`
}

type ThreatInfo struct {
	ThreatTypes      []string      `json:"threatTypes"`
	PlatformTypes    []string      `json:"platformTypes"`
	ThreatEntryTypes []string      `json:"threatEntryTypes"`
	ThreatEntries    []ThreatEntry `json:"threatEntries"`
}

type ClientInfo struct {
	ClientID      string `json:"clientId"`
	ClientVersion string `json:"clientVersion"`
}

type SafeBrowsingRequest struct {
	Client     ClientInfo `json:"client"`
	ThreatInfo ThreatInfo `json:"threatInfo"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç API
type Match struct {
	ThreatType string `json:"threatType"`
}

type SafeBrowsingResponse struct {
	Matches []Match `json:"matches"`
}

// checkGoogleSafeBrowsing –ø—Ä–æ–≤–µ—Ä—è–µ—Ç URL —Å –ø–æ–º–æ—â—å—é Google Safe Browsing API.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
func checkGoogleSafeBrowsing(urlToCheck string, apiKey string) (string, error) {
	// 1. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	apiEndpoint := fmt.Sprintf("https://safebrowsing.googleapis.com/v4/threatMatches:find?key=%s", apiKey)

	// 2. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	requestBody := SafeBrowsingRequest{
		Client: ClientInfo{
			ClientID:      "scam-list-project-go", // –ò–º—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
			ClientVersion: "1.0.0",
		},
		ThreatInfo: ThreatInfo{
			ThreatTypes:      []string{"MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"},
			PlatformTypes:    []string{"ANY_PLATFORM"},
			ThreatEntryTypes: []string{"URL"},
			ThreatEntries:    []ThreatEntry{{URL: urlToCheck}},
		},
	}

	// 3. –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON
	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %w", err)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
	resp, err := http.Post(apiEndpoint, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É %d: %s", resp.StatusCode, string(bodyBytes))
	}

	// 5. –ß–∏—Ç–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var apiResponse SafeBrowsingResponse
	if err := json.NewDecoder(resp.Body).Decode(&apiResponse); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	if len(apiResponse.Matches) > 0 {
		// –ï—Å–ª–∏ –≤ –ø–æ–ª–µ 'matches' –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç, —É–≥—Ä–æ–∑–∞ –Ω–∞–π–¥–µ–Ω–∞
		threatType := apiResponse.Matches[0].ThreatType
		return fmt.Sprintf("üî¥ –û–ø–∞—Å–Ω–æ! Google –æ–ø—Ä–µ–¥–µ–ª–∏–ª —É–≥—Ä–æ–∑—É: %s", threatType), nil
	}

	// –ï—Å–ª–∏ –ø–æ–ª–µ 'matches' –ø—É—Å—Ç–æ–µ, —É–≥—Ä–æ–∑ –Ω–µ—Ç
	return "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ (–ø–æ –¥–∞–Ω–Ω—ã–º Google)", nil
}

func main() {
	// ‚ùó –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API
	const apiKey = "AIzaSyCWAgdUXotMti82Xnxs_aeS-G6RtN2NLS0"

	// --- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---

	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
	maliciousURL := "http://testsafebrowsing.appspot.com/s/phishing.html"
	result1, err := checkGoogleSafeBrowsing(maliciousURL, apiKey)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '%s': %v\n", maliciousURL, err)
	} else {
		fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ '%s': %s\n", maliciousURL, result1)
	}

	// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
	safeURL := "https://google.com"
	result2, err := checkGoogleSafeBrowsing(safeURL, apiKey)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '%s': %v\n", safeURL, err)
	} else {
		fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ '%s': %s\n", safeURL, result2)
	}
}